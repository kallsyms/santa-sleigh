name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.22'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build linux binary
        run: make build-linux VERSION=${GITHUB_REF_NAME#v}
      - name: Build .deb package
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          packaging/linux/build_deb.sh "$VERSION" amd64 dist/linux/santa-sleigh
      - name: Upload linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            dist/linux/*
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build macOS binaries
        run: |
          make build-macos VERSION=${GITHUB_REF_NAME#v}
          mkdir -p dist/darwin/universal
          lipo -create -output dist/darwin/universal/santa-sleigh dist/darwin/santa-sleigh dist/darwin/santa-sleigh-amd64
      - name: Build .pkg installer
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          packaging/macos/build_pkg.sh "$VERSION" dist/darwin/universal/santa-sleigh
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            dist/darwin/*
            dist/macos/*.pkg
          if-no-files-found: error

  publish:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Prepare release files
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          mkdir -p release

          linux_bin=$(find dist -type f -name 'santa-sleigh' -path '*linux*' | head -n1)
          if [[ -n "$linux_bin" ]]; then
            cp "$linux_bin" "release/santa-sleigh-${VERSION}-linux-amd64"
          fi

          find dist -type f -name '*.deb' -print0 | while IFS= read -r -d '' deb; do
            cp "$deb" "release/$(basename "$deb")"
          done

          mac_arm=$(find dist -type f -name 'santa-sleigh' -path '*darwin*' ! -path '*universal*' ! -name '*amd64*' | head -n1)
          if [[ -n "$mac_arm" ]]; then
            cp "$mac_arm" "release/santa-sleigh-${VERSION}-darwin-arm64"
          fi

          mac_amd=$(find dist -type f -name 'santa-sleigh-amd64' | head -n1)
          if [[ -n "$mac_amd" ]]; then
            cp "$mac_amd" "release/santa-sleigh-${VERSION}-darwin-amd64"
          fi

          mac_universal=$(find dist -type f -name 'santa-sleigh' -path '*universal*' | head -n1)
          if [[ -n "$mac_universal" ]]; then
            cp "$mac_universal" "release/santa-sleigh-${VERSION}-darwin-universal"
          fi

          find dist -type f -name 'santa-sleigh-*.pkg' -print0 | while IFS= read -r -d '' pkg; do
            cp "$pkg" "release/$(basename "$pkg")"
          done
      - name: Update Homebrew formula and cask
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          PKG_PATH=$(find dist -type f -name "santa-sleigh-${VERSION}.pkg" | head -n1)
          ./packaging/homebrew/update_formula.sh "$VERSION" "" "$PKG_PATH"
      - name: Commit Homebrew updates
        run: |
          VERSION=${GITHUB_REF_NAME}
          if git status --short Formula/santa-sleigh.rb Casks/santa-sleigh.rb | grep -q .; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add Formula/santa-sleigh.rb Casks/santa-sleigh.rb
            git commit -m "Update Homebrew metadata for ${VERSION}"
            git push origin HEAD:main
          fi
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/**
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
